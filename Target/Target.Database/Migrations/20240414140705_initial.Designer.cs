// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Target.Database;

#nullable disable

namespace Target.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240414140705_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Target.Database.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("BankAccountType")
                        .HasColumnType("int");

                    b.Property<int>("ExternalId")
                        .HasColumnType("int");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Target.Database.Models.Depositor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Depositors");
                });

            modelBuilder.Entity("Target.Database.Models.DepositorAccount", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepositorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PercentageOwnership")
                        .HasColumnType("int");

                    b.HasKey("AccountId", "DepositorId");

                    b.HasIndex("DepositorId");

                    b.ToTable("DepositorAccounts");
                });

            modelBuilder.Entity("Target.Database.Models.Institution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ExternalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("Target.Database.Models.Account", b =>
                {
                    b.HasOne("Target.Database.Models.Institution", "Institution")
                        .WithMany("Accounts")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("Target.Database.Models.Depositor", b =>
                {
                    b.HasOne("Target.Database.Models.Institution", "Institution")
                        .WithMany("Depositors")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("Target.Database.Models.DepositorAccount", b =>
                {
                    b.HasOne("Target.Database.Models.Account", "Account")
                        .WithMany("DepositorAccounts")
                        .HasForeignKey("AccountId")
                        .IsRequired();

                    b.HasOne("Target.Database.Models.Depositor", "Depositor")
                        .WithMany("DepositorAccounts")
                        .HasForeignKey("DepositorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Depositor");
                });

            modelBuilder.Entity("Target.Database.Models.Account", b =>
                {
                    b.Navigation("DepositorAccounts");
                });

            modelBuilder.Entity("Target.Database.Models.Depositor", b =>
                {
                    b.Navigation("DepositorAccounts");
                });

            modelBuilder.Entity("Target.Database.Models.Institution", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Depositors");
                });
#pragma warning restore 612, 618
        }
    }
}
